import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import openai
import requests
from dotenv import load_dotenv, find_dotenv
from docx import Document
from docx.shared import Inches

_ = load_dotenv(find_dotenv())
openai.api_key = os.environ.get("OPENAI_API_KEY")

class ReportAgent:
    """
    Agent responsible for generating summary reports and visualizations.
    It can retrieve additional financial information (e.g., financial ratios and income statement data)
    using the FMP API via DataCollectionAgent functions and environment variables.
    All reports and plots are stored in the 'output' folder.
    """
    def __init__(self, data_agent):
        """
        Initialize ReportAgent with a data agent that can provide financial ratios and other data.
        
        Parameters:
            data_agent: An instance of DataCollectionAgent.
        """
        self.data_agent = data_agent
        self.output_dir = "output"
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
    
    def generate_summary_report(self, data, additional_info=""):
        """
        Generate a summary report using OpenAI's LLM based on recent technical analysis.
        'data' is expected to be a pandas DataFrame; we take the last 5 rows for context.
        'additional_info' can include risk parameters or other context.
        The report is saved as 'summary_report.txt' in the output folder.
        
        Parameters:
            data (pd.DataFrame): DataFrame with recent technical indicator data.
            additional_info (str): Extra context or financial information.
        
        Returns:
            str: The summary report generated by the LLM.
        """
        report_data = data.tail(5).to_csv(index=True)
        prompt = (
            "You are a trading strategy analyst. Based on the following recent technical indicator data (in CSV format), "
            "generate a concise summary report that includes your interpretation of the trends and recommendations. "
            "Data:\n" + report_data +
            "\n" + additional_info +
            "\nPlease generate a report summary."
        )
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a trading strategy analyst."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.5,
            )
            report = response.choices[0].message.content.strip()
        except Exception as e:
            print("LLM report generation failed:", e)
            report = "Report generation failed."
        
        # Save the report in the output folder.
        report_path = os.path.join(self.output_dir, "summary_report.txt")
        try:
            with open(report_path, "w") as f:
                f.write(report)
            print(f"Summary report saved to: {report_path}")
        except Exception as e:
            print("Failed to save summary report:", e)
        return report

    def get_additional_financial_info(self, ticker):
        """
        Retrieve additional financial data for the given ticker.
        This method uses the FMP API to get financial ratios (via DataCollectionAgent)
        and income statement data. The API key is loaded from .env.
        
        Parameters:
            ticker (str): The ticker symbol for which to retrieve financial data.
        
        Returns:
            str: A formatted string with financial ratios and recent income statement data.
        """
        ratios = self.data_agent.get_financial_ratios(ticker)
        api_key = os.environ.get("FMP_API_KEY", "YOUR_FMP_API_KEY")
        url = f"https://financialmodelingprep.com/api/v3/income-statement/{ticker}?apikey={api_key}"
        try:
            response = requests.get(url)
            response.raise_for_status()
            income_statement = response.json()
        except Exception as e:
            print("Error fetching income statement:", e)
            income_statement = None
        
        additional_info = (
            f"Financial Ratios:\n{ratios}\n\n"
            "Most Recent Income Statement:\n" +
            (str(income_statement[0]) if income_statement and len(income_statement) > 0 else "N/A")
        )
        return additional_info

    def plot_drawdown(self, portfolio_values, save_path=None):
        """
        Plot the portfolio drawdown over time and save the plot in the output folder.
        Drawdown is computed as the percentage difference from the running maximum.
        
        Parameters:
            portfolio_values (pd.Series): Series of portfolio values indexed by date.
            save_path (str, optional): Custom path to save the plot. If None, defaults to output/drawdown_plot.png.
        
        Returns:
            matplotlib.figure.Figure: The generated drawdown plot.
        """
        running_max = portfolio_values.cummax()
        drawdown = (portfolio_values - running_max) / running_max * 100

        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(drawdown.index, drawdown.values, color='blue', label='Drawdown (%)')
        ax.fill_between(drawdown.index, drawdown.values, 0,
                        where=(drawdown.values < 0),
                        color='red', alpha=0.3)

        ax.set_title("Portfolio Drawdown")
        ax.set_xlabel("Date")
        ax.set_ylabel("Drawdown (%)")
        ax.grid(True)
        ax.legend()
        fig.tight_layout()
        
        if not save_path:
            save_path = os.path.join(self.output_dir, "drawdown_plot.png")
        fig.savefig(save_path)
        print(f"Drawdown plot saved to: {save_path}")
        return fig

    def plot_trade_pnl_distribution(self, trade_pnl_series, save_path=None):
        """
        Plot the distribution of trade P&L (in percentage) with a KDE overlay and save it.
        
        Parameters:
            trade_pnl_series (pd.Series): Series representing trade profit/loss in percentage.
            save_path (str, optional): Custom path to save the plot. If None, defaults to output/trade_pnl_distribution.png.
        
        Returns:
            matplotlib.figure.Figure: The generated trade P&L distribution plot.
        """
        fig, ax = plt.subplots(figsize=(12, 6))
        sns.histplot(trade_pnl_series, bins=20, kde=True, color='skyblue', ax=ax)
        ax.axvline(x=0, color='red', linestyle='--', linewidth=2)

        ax.set_title("Trade P&L Distribution")
        ax.set_xlabel("Profit/Loss (%)")
        ax.set_ylabel("Frequency")
        ax.grid(True)
        fig.tight_layout()
        
        if not save_path:
            save_path = os.path.join(self.output_dir, "trade_pnl_distribution.png")
        fig.savefig(save_path)
        print(f"Trade P&L distribution plot saved to: {save_path}")
        return fig

    def plot_portfolio_value(self, portfolio_values, save_path=None):
        """
        Plot the portfolio value over time and save the plot in the output folder.
        
        Parameters:
            portfolio_values (pd.Series): Series of portfolio values indexed by date.
            save_path (str, optional): Custom path to save the plot. If None, defaults to output/portfolio_value.png.
        
        Returns:
            matplotlib.figure.Figure: The generated portfolio value plot.
        """
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(portfolio_values.index, portfolio_values.values, color='blue')
        ax.set_title("Portfolio Value Over Time")
        ax.set_xlabel("Date")
        ax.set_ylabel("Value ($)")
        ax.grid(True)
        fig.tight_layout()
        
        if not save_path:
            save_path = os.path.join(self.output_dir, "portfolio_value.png")
        fig.savefig(save_path)
        print(f"Portfolio value plot saved to: {save_path}")
        return fig

    def plot_portfolio_with_trades(self, portfolio_values, trades=None, save_path=None):
        """
        Plot the portfolio value over time, overlaying BUY/SELL signals, and save the plot.
        
        Parameters:
            portfolio_values (pd.Series): Series of portfolio values indexed by date.
            trades (pd.DataFrame): DataFrame with at least columns ['Date', 'action'] or ['Signal'].
            save_path (str, optional): Custom path to save the plot. If None, defaults to output/portfolio_with_trades.png.
        
        Returns:
            matplotlib.figure.Figure: The generated plot.
        """
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(portfolio_values.index, portfolio_values.values, color='blue', label='Portfolio Value ($)')

        if trades is not None and not trades.empty:
            trades['Date'] = pd.to_datetime(trades['Date'])
            buy_trades = trades[(trades['action'] == 'BUY') | (trades['Signal'] == 'BUY')]
            sell_trades = trades[(trades['action'] == 'SELL') | (trades['Signal'] == 'SELL')]

            if not buy_trades.empty:
                ax.scatter(buy_trades['Date'],
                           portfolio_values.loc[buy_trades['Date']],
                           marker='^', color='green', s=100, label='BUY')
            if not sell_trades.empty:
                ax.scatter(sell_trades['Date'],
                           portfolio_values.loc[sell_trades['Date']],
                           marker='v', color='red', s=100, label='SELL')
            ax.legend()

        ax.set_title("Portfolio Performance with Trades")
        ax.set_xlabel("Date")
        ax.set_ylabel("Value ($)")
        ax.grid(True)
        fig.tight_layout()
        
        if not save_path:
            save_path = os.path.join(self.output_dir, "portfolio_with_trades.png")
        fig.savefig(save_path)
        print(f"Portfolio with trades plot saved to: {save_path}")
        return fig

    def generate_final_report(self, data, portfolio_agent, additional_info=""):
        """
        Generate a complete final report including:
          - A summary report using LLM based on recent technical analysis.
          - Plot generation (drawdown, trade P&L distribution, portfolio value, portfolio with trades).
          - Creation of a final DOCX report that embeds the generated plots and summary text.
        
        Parameters:
            data (pd.DataFrame): DataFrame with recent technical indicator data.
            portfolio_agent: The PortfolioManagerAgent instance containing portfolio history and trade history.
            additional_info (str): Additional context (e.g., risk-free rate).
        
        Returns:
            str: The path to the final DOCX report.
        """
        # Generate summary report text.
        report_text = self.generate_summary_report(data, additional_info)
        
        # Convert portfolio history (list of dicts) to a DataFrame and then create a Series.
        portfolio_df = pd.DataFrame(portfolio_agent.portfolio_history)
        if 'date' in portfolio_df.columns:
            portfolio_df['date'] = pd.to_datetime(portfolio_df['date'])
            portfolio_df.sort_values('date', inplace=True)
            portfolio_df.set_index('date', inplace=True)
        else:
            print("Portfolio history is empty.")
            return None
        portfolio_value_series = portfolio_df['total_value']
        
        # Generate and save plots.
        fig_dd = self.plot_drawdown(portfolio_value_series)
        dd_file = os.path.join(self.output_dir, "drawdown.png")
        fig_dd.savefig(dd_file, dpi=100)
        plt.close(fig_dd)
        
        trade_pnl_series = portfolio_value_series.diff().dropna()
        fig_pnl_dist = self.plot_trade_pnl_distribution(trade_pnl_series)
        pnl_dist_file = os.path.join(self.output_dir, "pnl_distribution.png")
        fig_pnl_dist.savefig(pnl_dist_file, dpi=100)
        plt.close(fig_pnl_dist)
        
        fig_val = self.plot_portfolio_value(portfolio_value_series)
        val_file = os.path.join(self.output_dir, "portfolio_value.png")
        fig_val.savefig(val_file, dpi=100)
        plt.close(fig_val)
        
        trades_df = pd.DataFrame(portfolio_agent.trade_history) if portfolio_agent.trade_history else None
        fig_trades = self.plot_portfolio_with_trades(portfolio_value_series, trades=trades_df)
        trades_file = os.path.join(self.output_dir, "portfolio_with_trades.png")
        fig_trades.savefig(trades_file, dpi=100)
        plt.close(fig_trades)
        
        # Create the final DOCX report.
        report_docx_file = os.path.join(self.output_dir, "report.docx")
        doc = Document()
        doc.add_heading("Strategy Report", 0)
        doc.add_paragraph(report_text)
        
        doc.add_heading("Portfolio Drawdown", level=1)
        if os.path.exists(dd_file):
            doc.add_picture(dd_file, width=Inches(6))
        
        doc.add_heading("Trade PnL Distribution", level=1)
        if os.path.exists(pnl_dist_file):
            doc.add_picture(pnl_dist_file, width=Inches(6))
        
        doc.add_heading("Portfolio Value Over Time", level=1)
        if os.path.exists(val_file):
            doc.add_picture(val_file, width=Inches(6))
        
        doc.add_heading("Portfolio Performance with Trades", level=1)
        if os.path.exists(trades_file):
            doc.add_picture(trades_file, width=Inches(6))
        
        doc.save(report_docx_file)
        print(f"Final report generated and saved at: {report_docx_file}")
        return report_docx_file
